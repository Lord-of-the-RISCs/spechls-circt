name: Build and test

on: [push, pull_request]

env:
  YOSYS_COMMIT: e0d2eb90b5377133e28008f31add8988e14ca99f
  CIRCT_COMMIT: f2291d637ac07d2c650ac81af8ef020f7b8368d2
  CMAKE_FLAGS: '-DYosys_LIBRARY="$GITHUB_WORKSPACE/yosys/libyosys.so" -DYosys_INCLUDE_DIR="$GITHUB_WORKSPACE/yosys" -DMLIR_DIR="$GITHUB_WORKSPACE/circt/llvm/build/lib/cmake/mlir" -DCIRCT_DIR="$GITHUB_WORKSPACE/circt/build/lib/cmake/circt" -DLLVM_EXTERNAL_LIT="$GITHUB_WORKSPACE/circt/llvm/build/bin/llvm-lit" -DLLVM_ENABLE_LLD=ON -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DUSE_ALTERNATE_LINKER=mold'

jobs:
  lint:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - name: Get Template Code
        uses: actions/checkout@v2
      - name: clang-format
        uses: DoozyX/clang-format-lint-action@v0.6
        with:
          source: "."
          extensions: "h,cpp"
          clangFormatVersion: 9

  build:
    name: Build and test
    runs-on: ubuntu-latest
    # Request permissions to push to gh-pages branch.
    permissions:
      contents: write
    steps:
      - name: Configure Environment
        run: |
          echo "$GITHUB_WORKSPACE/circt/prefix/bin" >> "$GITHUB_PATH"
          sudo apt-get -y update
          sudo apt-get install -y \
            build-essential \
            ninja-build \
            cmake \
            curl \
            git \
            grep \
            libgtest-dev \
            openssh-client \
            python3 \
            python3-setuptools \
            python3-pip \
            sudo \
            zlib1g-dev \
            libtinfo-dev \
            libxml2-dev \
            clang \
            lld \
            bison \
            flex \
            libreadline-dev \
            gawk \
            tcl-dev \
            libffi-dev \
            graphviz \
            xdot \
            pkg-config \
            libboost-system-dev \
            libboost-python-dev \
            libboost-filesystem-dev \
            mold
      - name: Get spechls-circt
        uses: actions/checkout@v4
        with:
          path: "spechls-circt"
          submodules: "recursive"
      - name: Cache Yosys
        id: cache-yosys
        uses: actions/cache@v4
        with:
          path: yosys
          key: ${{ runner.os }}-yosys-install-${{ env.YOSYS_COMMIT }}
      - name: Get Yosys
        if: steps.cache-yosys.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: "Lord-of-the-RISCs/yosys"
          ref: "${{ env.YOSYS_COMMIT }}"
          path: "yosys"
          submodules: "recursive"
      - name: Build Yosys
        if: steps.cache-yosys.outputs.cache-hit != 'true'
        run: |
          make -C yosys -j$(nproc)
      - name: Cache CIRCT
        id: cache-circt
        uses: actions/cache@v4
        with:
          path: circt
          key: ${{ runner.os }}-circt-install-${{ env.CIRCT_COMMIT }}
      - name: Get CIRCT
        if: steps.cache-circt.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: "Lord-of-the-RISCs/circt"
          ref: "${{ env.CIRCT_COMMIT }}"
          path: "circt"
          submodules: "recursive"
      - name: Build CIRCT
        if: steps.cache-circt.outputs.cache-hit != 'true'
        run: |
          mkdir -p "$GITHUB_WORKSPACE/circt/prefix"
          mkdir -p "$GITHUB_WORKSPACE/circt/llvm/build"
          mkdir -p "$GITHUB_WORKSPACE/circt/build"
          cd "$GITHUB_WORKSPACE/circt/llvm/build"
          cmake -G Ninja ../llvm -DLLVM_TARGETS_TO_BUILD="host" -DLLVM_ENABLE_PROJECTS=mlir -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_BUILD_EXAMPLES=OFF -DLLVM_ENABLE_LLD=ON -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_INSTALL_UTILS=ON -DLLVM_PARALLEL_LINK_JOBS=2 -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE/circt/prefix" -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_BINDINGS=OFF
          cmake --build . --target install
          cd "$GITHUB_WORKSPACE/circt/build"
          cmake -G Ninja .. -DMLIR_DIR="$GITHUB_WORKSPACE/circt/llvm/build/lib/cmake/mlir" -DLLVM_DIR="$GITHUB_WORKSPACE/circt/llvm/build/lib/cmake/llvm" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_LLD=ON -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE/circt/prefix"
          cmake --build . --target install
      - name: Sanitizer build
        run: |
          mkdir -p "$GITHUB_WORKSPACE/spechls-circt/sanitizer-build"
          cd "$GITHUB_WORKSPACE/spechls-circt/sanitizer-build"
          cmake -G Ninja .. -DCMAKE_BUILD_TYPE=Debug -DUSE_SANITIZER='Address;Undefined' ${{ env.CMAKE_FLAGS }}
          cmake --build .
      - name: Release build
        run: |
          mkdir -p "$GITHUB_WORKSPACE/spechls-circt/build"
          cd "$GITHUB_WORKSPACE/spechls-circt/build"
          cmake -G Ninja .. -DCMAKE_BUILD_TYPE=Release ${{ env.CMAKE_FLAGS }}
          cmake --build .
      - name: Build documentation
        run: |
          cd "$GITHUB_WORKSPACE/spechls-circt/build"
          cmake --build . --target circt-doc
      - name: Install documentation
        run: |
          cd "$GITHUB_WORKSPACE/spechls-circt"
          ./website/copy_docs.sh build/docs/ website/content/docs/
          ./website/process_included_docs.sh website/content/docs/
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: '0.145.0'
          extended: true
      - name: Build website
        run: (cd "$GITHUB_WORKSPACE/spechls-circt/website" && hugo --minify -d ../public)
      - name: Deploy website
        uses: peaceiris/actions-gh-pages@v3
        with:
          publish_branch: gh-pages
          publish_dir: "$GITHUB_WORKSPACE/spechls-circt/public"
          force_orphan: true
          github_token: ${{ secrets.GITHUB_TOKEN }}
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
      - name: Timestamp end
        run: date
